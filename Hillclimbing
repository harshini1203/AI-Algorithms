#include <iostream>
#include <vector>
#include<queue>
#include<algorithm>
#include<climits>
using namespace std;

struct Edge {
    int vertex;
    int cost;

    Edge(int v, int c) {
        vertex=v;
        cost=c;
    }
};
class Graph {

    int N,E;
    vector<Edge>* adjacencyList ;// The vector to hold the edges

public:
    
    Graph(int N,int E)
    {
    this->N = N;
    this->E=E;
    adjacencyList = new vector<Edge>[N];
    }
    
     void addEdge(int v1, int v2, int cost) {
        adjacencyList[v1].push_back(Edge(v2, cost)); // Pushing edge with destination vertex and cost to adjacency list of node v1
        adjacencyList[v2].push_back(Edge(v1, cost)); // For undirected graph, add an edge in both directions
    }

    void dfs(int node,int visited[],vector<int> &answer,int goal){
      visited[node]=1;
      int chosen;
      int mini=INT_MAX;
      answer.push_back(node);
      if (node == goal) {
            return;
        }
      for(Edge& edge : adjacencyList[node]){
          if(!visited[edge.vertex] && edge.cost<=mini){
              mini=edge.cost;
              node=edge.vertex;
              cout<<node<<endl;
          }
      }
      dfs(node,visited,answer,goal);
              if (answer.back() == goal) {
                    return;
               }
    answer.pop_back();
  }
    vector<int> dfsOfGraph(int goal) {
        int visited[N]={0};
        int source=0;
        vector<int> answer;
        dfs(source,visited,answer,goal);
        return answer;
        
    }
    void printAnswerArray(vector<int> ans){
        for(int i=0;i<ans.size();i++){
            cout<<ans[i]<<" ";
        }
    }
     void printAdjacencyList(){
        cout<<endl;
        cout<<"The adjacency list is :"<<endl;
    
        for (int i = 0; i < N; i++) {
            cout << "Node " << i << " -> ";
            for (const Edge& edge : adjacencyList[i]) {
                cout << "(" << edge.vertex << ", " << edge.cost << ") ";
            }
            cout << endl;
        }
    

        cout<<endl;
    }
};

int main() {
    int N, E, choice, goal,cost;
    vector<int> ans;
    vector<vector<int>> answer;
    cout << "Enter the number of nodes/vertices: ";
    cin >> N;
    cout << "Enter the number of edges: ";
    cin >> E;
    Graph g(N, E);
    cout << "Enter the source and destination vertices for each edge and their cost :" << endl;
    for (int i = 0; i < E; i++) {
        int v1, v2;
        cout << "V1 V2 cost : ";
        cin >> v1 >> v2 >>cost;
        g.addEdge(v1, v2,cost);
    }
    g.printAdjacencyList();
    cout << endl << "Enter the goal node: ";
    cin >> goal;
    cout << endl;
   
  
    cout << "The traversal for your desired algorithm is: "<<endl;
    
    ans=g.dfsOfGraph(goal);
    g.printAnswerArray(ans); 

    return 0;
}

